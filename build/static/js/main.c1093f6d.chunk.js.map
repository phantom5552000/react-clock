{"version":3,"sources":["logo.svg","Clock.js","App.js","reportWebVitals.js","index.js"],"names":["Clock","props","state","date","moment","this","timerID","setInterval","tick","clearInterval","setState","dateTimeFormat","format","utc","React","Component","App","className","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sMAAe,G,MAAA,IAA0B,kC,+DCgDzBA,E,kDAhCZ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,KAAMC,OAFH,E,qDAInB,WAAqB,IAAD,OAClBC,KAAKC,QAAUC,aACb,kBAAM,EAAKC,SACX,M,kCAIJ,WACEC,cAAcJ,KAAKC,W,kBAGrB,WACED,KAAKK,SAAS,CACZP,KAAMC,U,oBAIV,WACE,IAAOO,EAAiB,0BACxB,OACE,gCACE,sCAASN,KAAKH,MAAMC,KAAKS,OAAOD,GAAhC,OACA,sCAASN,KAAKH,MAAMC,KAAKU,MAAMD,OAAOD,GAAtC,c,GA3BUG,IAAMC,WCAXC,MAXf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,+BAAM,cAAC,EAAD,YCGCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c1093f6d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport moment from 'moment';\n\n\nfunction formatDate (date, format) {\n    format = format.replace(/yyyy/g, date.getFullYear());\n    format = format.replace(/MM/g, ('0' + (date.getMonth() + 1)).slice(-2));\n    format = format.replace(/dd/g, ('0' + date.getDate()).slice(-2));\n    format = format.replace(/HH/g, ('0' + date.getHours()).slice(-2));\n    format = format.replace(/mm/g, ('0' + date.getMinutes()).slice(-2));\n    format = format.replace(/ss/g, ('0' + date.getSeconds()).slice(-2));\n    format = format.replace(/SSS/g, ('00' + date.getMilliseconds()).slice(-3));\n    return format;\n};\n  \nclass Clock extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {date: moment()};\n    }\n    componentDidMount() {\n      this.timerID = setInterval(\n        () => this.tick(),\n        50\n      );\n    }\n  \n    componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n  \n    tick() {\n      this.setState({         // 直接 stateに代入してはだめ。reactの基本\n        date: moment()\n      });\n    }  \n  \n    render() {\n      const  dateTimeFormat = 'YYYY/MM/DD HH:mm:ss.SSS';\n      return (\n        <div>\n          <p>JST  {this.state.date.format(dateTimeFormat)} </p>\n          <p>UTC  {this.state.date.utc().format(dateTimeFormat)} </p>\n         </div>        \n      );\n    }\n}\n\nexport default  Clock;\n","import logo from './logo.svg';\nimport './App.css';\nimport Clock from './Clock';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <code><Clock/></code>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}